{"version":3,"sources":["webpack:///./src/styles/templates/work/index.js","webpack:///./src/templates/work/index.jsx","webpack:///./src/styles/common.js","webpack:///./src/styles/var.js","webpack:///./src/components/_common/NaviItem.jsx"],"names":["Wrapper","styled","div","withConfig","displayName","componentId","column","pc","FirstView","headerHeight","underFirstView","TopImage","Img","attrs","style","width","height","DocImage","__webpack_require__","d","__webpack_exports__","query","props","pageContext","data","_pageContext$work","work","id","title","description","position","skills","detail","documents","image","docImages","json","map","getDocImages","react","resolutions","anchors","dangerouslySetInnerHTML","__html","skill","key","i","alt","src","row","styled_components__WEBPACK_IMPORTED_MODULE_0__","css","profile","works"],"mappings":"yJAOaA,EAAUC,IAAOC,IAAVC,WAAA,CAAAC,YAAA,gBAAAC,YAAA,YAAGJ,CAAH,6DAChBK,IAGAC,KAMSC,EAAYP,IAAOC,IAAVC,WAAA,CAAAC,YAAA,kBAAAC,YAAA,YAAGJ,CAAH,2EACGQ,IAAkBC,KAK9BC,EAAWV,YAAOW,KAAKC,MAAM,CACxCC,MAAO,CACLC,MAAO,QACPC,OAAM,gBAAkBP,IAAlB,MAAoCC,IAApC,OAHWP,WAAA,CAAAC,YAAA,iBAAAC,YAAA,YAAGJ,CAAH,MAORgB,EAAWhB,YAAOW,KAAKC,MAAM,CACxCC,MAAO,CACLC,MAAO,QACPC,OAAQ,WAHSb,WAAA,CAAAC,YAAA,iBAAAC,YAAA,YAAGJ,CAAH,eC7BrBiB,EAAAC,EAAAC,EAAA,0BAAAC,IAiBeD,EAAA,iBAACE,GAAiB,IACvBC,EAAsBD,EAAtBC,YAAaC,EAASF,EAATE,KADUC,EAU3BF,EAAYG,KAPdC,EAH6BF,EAG7BE,GACAC,EAJ6BH,EAI7BG,MACAC,EAL6BJ,EAK7BI,YACAC,EAN6BL,EAM7BK,SACAC,EAP6BN,EAO7BM,OACAC,EAR6BP,EAQ7BO,OACAC,EAT6BR,EAS7BQ,UAEIC,EAAQV,EAAQG,EAAJ,SACZQ,EAda,SAACF,EAAWG,GAAZ,OAAqBH,EAAUI,IAAI,SAAClB,GAAD,OAAOiB,EAAKjB,KAchDmB,CAAaL,EAAWT,GAE1C,OACEe,EAAA,cAACvC,EAAD,KACEuC,EAAA,cAAC/B,EAAD,CAAa0B,MAAOA,GAClBK,EAAA,cAAC5B,EAAD,CAAY6B,YAAaN,EAAMM,eAEjCD,EAAA,wBAAKX,GACLW,EAAA,uBAAIV,GACJU,EAAA,oBAAIZ,GAAIc,IAAQX,UAAhB,WACAS,EAAA,mBAAGG,wBAAyB,CAAEC,OAAQb,KACtCS,EAAA,mCACCR,EAAOM,IAAI,SAACO,GAAD,OAAWL,EAAA,mBAAGM,IAAKD,EAAMjB,IAAKiB,EAAMhB,SAChDW,EAAA,oBAAIZ,GAAIc,IAAQT,QAAhB,MACAO,EAAA,mBAAGG,wBAAyB,CAAEC,OAAQX,KACtCO,EAAA,oBAAIZ,GAAIc,IAAQR,WAAhB,SACCE,EAAUE,IAAI,SAAClB,EAAG2B,GAAJ,OACbP,EAAA,cAACtB,EAAD,CACEuB,YAAarB,EAAEqB,YACfO,IAAG,WAAaD,EAChBD,IAAK1B,EAAEqB,YAAYQ,UAlC7B,IAyCa3B,EAAK,+CCxDlBH,EAAAC,EAAAC,EAAA,sBAAAd,IAAAY,EAAAC,EAAAC,EAAA,sBAAA6B,IAAA,IAAAC,EAAAhC,EAAA,KAEaZ,EAAS6C,YAAH,mFAONF,EAAME,YAAH,kHCVhBjC,EAAAC,EAAAC,EAAA,sBAAAb,IAAAW,EAAAC,EAAAC,EAAA,sBAAAX,IAAAS,EAAAC,EAAAC,EAAA,sBAAAV,IAAO,IAAMH,EAAK,4BAELE,EAAe,OACfC,EAAiB,yCCF9BQ,EAAAC,EAAAC,EAAA,sBAAAqB,IAAAvB,EAAA,OAEauB,EAAU,CACrBW,QAAS,UACTrB,OAAQ,SACRsB,MAAO,QACPvB,SAAU,WACVE,OAAQ,SACRC,UAAW","file":"component---src-templates-work-index-jsx-8fdbba7e4ece64d7fb37.js","sourcesContent":["// @flow\nimport styled from 'styled-components';\nimport Img from 'gatsby-image';\n\nimport { column } from '../../../styles/common';\nimport { pc, headerHeight, underFirstView } from '../../../styles/var';\n\nexport const Wrapper = styled.div`\n  ${column};\n  margin: 0 16px;\n\n  ${pc} {\n    margin: 0 128px;\n    text-align: center;\n  }\n`;\n\nexport const FirstView = styled.div`\n  height: calc(100vh - ${headerHeight} - ${underFirstView});\n  width: 100vw;\n  background-color: lightgray;\n`;\n\nexport const TopImage = styled(Img).attrs({\n  style: {\n    width: '100vw',\n    height: `calc(100vh - ${headerHeight} - ${underFirstView})`,\n  },\n})``;\n\nexport const DocImage = styled(Img).attrs({\n  style: {\n    width: '100vw',\n    height: '800px',\n  },\n})``;\n","// @flow\nimport * as React from 'react';\nimport { graphql } from 'gatsby';\n\nimport type { Work } from '../../entities/types';\nimport * as s from '../../styles/templates/work/index';\n\nimport { anchors } from '../../components/_common/NaviItem';\n\ntype Props = {\n  pageContext: {\n    work: Work,\n  },\n  data: {},\n};\n\nconst getDocImages = (documents, json) => documents.map((d) => json[d]);\n\nexport default (props: Props) => {\n  const { pageContext, data } = props;\n  const {\n    id,\n    title,\n    description,\n    position,\n    skills,\n    detail,\n    documents,\n  } = pageContext.work;\n  const image = data[`${id}Image`];\n  const docImages = getDocImages(documents, data);\n\n  return (\n    <s.Wrapper>\n      <s.FirstView image={image}>\n        <s.TopImage resolutions={image.resolutions} />\n      </s.FirstView>\n      <h1>{title}</h1>\n      <p>{description}</p>\n      <h2 id={anchors.position}>担当工程/役割</h2>\n      <p dangerouslySetInnerHTML={{ __html: position }} />\n      <h2>使用skill</h2>\n      {skills.map((skill) => <p key={skill.id}>{skill.title}</p>)}\n      <h2 id={anchors.detail}>詳細</h2>\n      <p dangerouslySetInnerHTML={{ __html: detail }} />\n      <h2 id={anchors.documents}>実際の資料</h2>\n      {docImages.map((d, i) => (\n        <s.DocImage\n          resolutions={d.resolutions}\n          alt={`document${i}`}\n          key={d.resolutions.src}\n        />\n      ))}\n    </s.Wrapper>\n  );\n};\n\nexport const query = graphql`\n  query GetWorkContents {\n    project1Image: imageSharp(resolutions: { originalName: { eq: \"work_project1.png\" } }) {\n      ...ImgFragment\n    }\n    project2Image: imageSharp(resolutions: { originalName: { eq: \"work_project2.png\" } }) {\n      ...ImgFragment\n    }\n    project3Image: imageSharp(resolutions: { originalName: { eq: \"work_project3.png\" } }) {\n      ...ImgFragment\n    }\n    project4Image: imageSharp(resolutions: { originalName: { eq: \"work_project4.png\" } }) {\n      ...ImgFragment\n    }\n    project1_doc1: imageSharp(resolutions: { originalName: { eq: \"project1_doc1.png\" } }) {\n      ...ImgFragment\n    }\n    project1_doc2: imageSharp(resolutions: { originalName: { eq: \"project1_doc2.png\" } }) {\n      ...ImgFragment\n    }\n    project2_doc1: imageSharp(resolutions: { originalName: { eq: \"project2_doc1.png\" } }) {\n      ...ImgFragment\n    }\n    project2_doc2: imageSharp(resolutions: { originalName: { eq: \"project2_doc2.png\" } }) {\n      ...ImgFragment\n    }\n    project2_doc3: imageSharp(resolutions: { originalName: { eq: \"project2_doc3.png\" } }) {\n      ...ImgFragment\n    }\n  }\n`;\n","// @flow\nimport { css } from 'styled-components';\n\nexport const column = css`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const row = css`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const circle = (size: number) => css`\n  width: ${size}px;\n  height: ${size}px;\n  border-radius: 50%;\n`;\n","export const pc = '@media (min-width: 415px)';\n\nexport const headerHeight = '50px';\nexport const underFirstView = '64px';\n","// @flow\nimport * as React from 'react';\n\nexport const anchors = {\n  profile: 'profile',\n  skills: 'skills',\n  works: 'works',\n  position: 'position',\n  detail: 'detail',\n  documents: 'documents',\n};\n\nexport type Anchors = $Keys<typeof anchors>;\n\ntype Props = {\n  children: React.Node,\n  targetId: Anchors,\n  className?: string,\n};\n\nexport default (props: Props) => {\n  const { children, targetId, className } = props;\n\n  return (\n    <li className={className}>\n      <button\n        href=\"#\"\n        onClick={() => {\n          const target = document.querySelector(`#${targetId}`);\n          if (target) {\n            target.scrollIntoView({\n              behavior: 'smooth',\n            });\n          }\n        }}\n      >\n        {children}\n      </button>\n    </li>\n  );\n};\n"],"sourceRoot":""}